[
{
	"uri": "/lab-1/",
	"title": "Lab 1",
	"tags": [],
	"description": "",
	"content": " Requirements Elicitation and Analysis\nDeliverables  Use Cases Functional Requirements Non-functional Requirements Analysis Models  "
},
{
	"uri": "/lab-1/use-cases/",
	"title": "Use Cases",
	"tags": [],
	"description": "",
	"content": " Revision History    Name Date Reason For Changes Version     Dean 11/09/2018 First update 1.0    Use Case Diagram  Use Case List    Primary Actor Use Cases     Web User 1.1 View Singapore Real-time Crisis Status In Web Client System   Web User 2.1 Report Crisis Using Crisis Report Form   Public User 2.2 Report Crisis to Call Center Operator   Call Center Operator 2.3 Report Crisis From Public Call   Call Center Operator 3.1 View Reported Crisis   Call Center Operator 3.2 Edit Crisis Listing Information   Call Center Operator 3.3 Dispatch Crisis Interventions   Call Center Operator 3.4 Resolve Crisis   Admin User 4.1 Edit System Settings   Admin User 4.2 Manage User Accounts   Prime Ministerâ€™s Office 5.1 Receive Singapore Crisis Status Summary Report   Emergency Agencies 5.2 Receive Crisis Intervention Request via SMS   Public User 5.3 Receive Civil Defence Shelter Locations From Facebook and Twitter    Use Case Description 1.1    - -     Use Case ID: 1.1   Use Case Name: View Singapore Real-time Crisis Status In Web Client System   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Web User   Description: Allow Web User to view real-time crisis status of Singapore   Trigger: User enters the Web Client System   Preconditions: Web User has entered the website   Postconditions: Web User is able to view real-time crisis status of Singapore   Normal Flow: 1. User enters the website\n2. Website fetches real-time weather conditions, dengue hotspot information, haze information, emergency situation (reported by user) from API Service System\n3. Website presents the fetched data on a map of Singapore\n4. User may refresh the map to see real time status   Alternative Flows: -   Exceptions: 2a. Website fails to fetch one or more types of data\n1. Website displays successfully fetched data\n2. Website displays message that informs user of which type of data failed to load\n3. User may request fetching again by clicking Retry   Includes: -   Priority: High   Frequency of Use: High   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    2.1    - -     Use Case ID: 2.1   Use Case Name: Report Crisis Using Crisis Report Form   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Web User   Description: Allow Web User to report crisis by submitting forms   Trigger: -   Preconditions: -   Postconditions: User has reported crisis   Normal Flow: 1. User goes to Crisis Report section in Web Client System\n2. User fills in Crisis Report form with name, mobile number, location, type of assistance requested (emergency ambulance, rescue, and evacuation, fire-fighting, gas leak control) and Crisis description\n3. User click submit button\n4. Website validates crisis report form\n5. Website sends Crisis details to API Service System\n6. Website shows confirmation   Alternative Flows: -   Exceptions: 4a. Website fails to validate Crisis Report form due to incompleteness\n1. Website displays message that informs user of incompleteness of content\n2. User may re-fill Crisis Report form\n3. User may re-submit Crisis Report form, return normal flow at step 4\n5a. Website fails to send Crisis Report form to API Service System\n1. Website displays message that informs user of failed submission\n2. User may re-submit crisis report form, return to normal flow at step 4   Includes: -   Priority: High   Frequency of Use: Low   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    2.2    - -     Use Case ID: 2.2   Use Case Name: Report Crisis to Call Center Operator   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Public User   Description: Allow Public User to report crisis through Call Center Operator   Trigger: -   Preconditions: -   Postconditions: User has reported crisis   Normal Flow: 1. User goes to Crisis Report Page\n2. User looks up phone number for crisis report\n3. User dials the phone number\n4. User reports crisis through Call Center Operator   Alternative Flows: -   Exceptions: -   Includes: -   Priority: High   Frequency of Use: Low   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    2.3    - -     Use Case ID: 2.3   Use Case Name: Report Crisis From Public Call   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Call Center Operator   Description: Allow Call Center Operator to report crisis received from public call   Trigger: Call Center Operator received crisis report from public call   Preconditions: Call Center Operator has logged in   Postconditions: Call Center Operator has reported crisis   Normal Flow: 1. User goes to Control Portal Page\n2. Website authenticates user\n3. Call Center Operator fills in crisis report form (name, mobile number, location, type of assistance requested (emergency ambulance, rescue, and evacuation, fire-fighting, gas leak control)\n4. Website validates crisis report form\n5. Website sends crisis report to API Service System\n6. Website shows confirmation   Alternative Flows: -   Exceptions: 2a. Authentication fails due to user not logged in\n1. Website redirects user to login page\n2. User may log in, return to normal flow at step 2\n4a. Website fails to validate crisis report form due to incompleteness\n1. Website displays message that informs user of incomplete form\n2. User may re-fill crisis report form\n3. User may re-submit crisis report form, return to normal flow at step 4\n5a. Website fails to send crisis report to API Service System\n1. Website displays message that informs user of failed attempt\n2. User may retry, return to normal flow at step 5   Includes: -   Priority: High   Frequency of Use: Low   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    3.1    - -     Use Case ID: 3.1   Use Case Name: View Reported Crisis   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Call Center Operator   Description: Allow Call Center Operator to view reported crisis   Trigger: -   Preconditions: Call Center Operator has logged in   Postconditions: Call Center Operator has viewed reported crisis   Normal Flow: 1. User goes to Control Portal Page\n2. Website authenticates user\n3. Website fetches reported crisis\n4. Website displays a list of reported crisis   Alternative Flows: -   Exceptions: 2a. Authentication fails due to user not logged in\n1. Website redirects user to login page\n2. User may log in, return to normal flow at step 2\n3a. Website fails to fetch reported crisis\n1. Website displays message that informs user of failed fetch\n2. User may reload page, return to normal flow at step 3   Includes: -   Priority: High   Frequency of Use: High   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    3.2    - -     Use Case ID: 3.2   Use Case Name: Edit Crisis Listing Information   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Call Center Operator   Description: Allow Call Center Operator to edit crisis information   Trigger: -   Preconditions: Call Center Operator has logged in   Postconditions: Call Center Operator has edited crisis information   Normal Flow: 1. User goes to Control Portal Page\n2. Website authenticates user\n3. Website fetches reported crisis\n4. Website displays a list of reported crisis\n5. Call Center Operator edits a crisis listing\n6. Call Center Operator submits edited crisis listing\n7. Website sends updated crisis listing to API Service System\n8. Website shows confirmation   Alternative Flows: -   Exceptions: 2a. Authentication fails due to user not logged in\n1. Website redirects user to login page\n2. User may log in, return to normal flow at step 2\n3a. Website fails to fetch reported crisis\n1. Website displays message that informs user of failed fetch\n2. User may reload page, return to normal flow at step 3\n7a. Website fails to send updated crisis listing to API Service System\n1. Website displays message that informs user of failed submission\n2. User may re-submit, return to normal flow at step 7   Includes: -   Priority: High   Frequency of Use: Medium   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    3.3    - -     Use Case ID: 3.3   Use Case Name: Dispatch Crisis Interventions   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Call Center Operator   Description: Allow Call Center Operator to dispatch crisis interventions   Trigger: -   Preconditions: Call Center Operator has logged in   Postconditions: Call Center Operator has dispatched crisis interventions   Normal Flow: 1. User goes to Control Portal Page\n2. Website authenticates user\n3. Website fetches reported crisis\n4. Website displays a list of reported crisis\n5. Call Center Operator clicks \u0026ldquo;dispatch\u0026rdquo; on a crisis listing\n6. Call Center Operator reviews crisis listing\n7. Call Center Operator confirms dispatch\n8. Website sends crisis intervention dispatch request to API Service System\n9. Website shows confirmation   Alternative Flows: -   Exceptions: 2a. Authentication fails due to user not logged in\n1. Website redirects user to login page\n2. User may log in, return to normal flow at step 2\n3a. Website fails to fetch reported crisis\n1. Website displays message that informs user of failed fetch\n2. User may reload page, return to normal flow at step 3\n8a. Website fails to send crisis intervention dispatch request to API Service System\n1. Website displays message that informs user of failed request\n2. User may re-send, return to normal flow at step 8   Includes: -   Priority: High   Frequency of Use: Medium   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    3.4    - -     Use Case ID: 3.4   Use Case Name: Resolve Crisis   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Call Center Operator   Description: Allow Call Center Operator to mark a crisis listing as resolved   Trigger: -   Preconditions: Call Center Operator has logged in   Postconditions: Call Center Operator has marked a crisis listing as resolved   Normal Flow: 1. User goes to Control Portal Page\n2. Website authenticates user\n3. Website fetches reported crisis\n4. Website displays a list of reported crisis\n5. Call Center Operator clicks \u0026ldquo;Resolve\u0026rdquo; on a crisis listing\n6. Website sends crisis resolve request to API Service System\n7. \u0026ldquo;Resolve\u0026rdquo; button becomes disabled   Alternative Flows: -   Exceptions: 2a. Authentication fails due to user not logged in\n1. Website redirects user to login page\n2. User may log in, return to normal flow at step 2\n3a. Website fails to fetch reported crisis\n1. Website displays message that informs user of failed fetch\n2. User may reload page, return to normal flow at step 3\n6a. Website fails to send crisis resolve request to API Service System\n1. Website displays message that informs user of failed request\n2. User may re-attempt, return to normal flow at step 6   Includes: -   Priority: High   Frequency of Use: Medium   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    4.1    - -     Use Case ID: 4.1   Use Case Name: Edit System Settings   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Admin User   Description: Allow Admin User to edit system settings   Trigger: -   Preconditions: Admin User has logged in   Postconditions: Admin User has edited system settings   Normal Flow: 1. User goes to Control Portal Page\n2. Website authenticates user\n3. Admin User goes to Setting Page\n4. Admin User edits system settings (crisis type, assistance type, social media account, emergency agencies, summary reporting Email)\n5. Admin User clicks \u0026ldquo;Apply\u0026rdquo;\n6. Website sends system setting update request\n7. Website shows confirmation   Alternative Flows: -   Exceptions: 2a. Authentication fails due to user not logged in\n1. Website redirects user to login page\n3a. Setting Page is invisible due to insufficient user privilege\n1. User may re-login using another account   Includes: -   Priority: Medium   Frequency of Use: Low   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    4.2    - -     Use Case ID: 4.2   Use Case Name: Manage User Accounts   Created By: Liu Mingyu   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Admin User   Description: Allow Admin User to manage user accounts   Trigger: -   Preconditions: Admin User has logged in   Postconditions: Admin User has done user account management operations   Normal Flow: 1. User goes to Control Portal Page\n2. Website authenticates user\n3. Admin User goes to User Page\n4. Admin User may create, edit or delete accounts   Alternative Flows: -   Exceptions: 2a. Authentication fails due to user not logged in\n1. Website redirects user to login page\n3a. Setting Page is invisible due to insufficient user privilege\n1. User may re-login using another account   Includes: -   Priority: Medium   Frequency of Use: Low   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    5.1    - -     Use Case ID: 5.1   Use Case Name: Receive Singapore Crisis Status Summary Report   Created By: Nicholas   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Prime Minister\u0026rsquo;s Office   Description: Allow Prime Minister\u0026rsquo;s Office to receive crisis status summary report every 30 minutes   Trigger: Check ever 30 minutes   Preconditions: -   Postconditions: Prime Minister\u0026rsquo;s Office has received crisis status summary report   Normal Flow: 1. API Service System checks whether 30 minutes have elapsed since last report\n2. API Service System generates crisis status summary report\n3. API Service System stores crisis status summary report into database\n4. API Service System sends crisis status summary report to Prime Minister\u0026rsquo;s Office through Notification System   Alternative Flows: -   Exceptions: 1a. 30 minutes have not elapsed\n1. Wait 5 minutes and check again   Includes: -   Priority: High   Frequency of Use: High (every 30 minutes)   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    5.2    - -     Use Case ID: 5.2   Use Case Name: Receive Crisis Intervention Request via SMS   Created By: Nicholas   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Emergency Agencies   Description: Allow emergency agencies to receive crisis intervention request via SMS   Trigger: Assistance is requested   Preconditions: -   Postconditions: Emergency agencies have received SMS   Normal Flow: 1. Notification System sends SMS to emergency agencies   Alternative Flows: -   Exceptions: -   Includes: -   Priority: High   Frequency of Use: Low (when assistance is requested)   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    5.3    - -     Use Case ID: 5.3   Use Case Name: Receive Civil Defence Shelter Locations From Facebook and Twitter   Created By: Nicholas   Last Updated By: Liu Mingyu   Date Created: 09/09/2018   Date Last Updated: 09/09/2018       - -     Actors: Public User   Description: Allow Public User to see latest civil defence shelter locations on Facebook and Twitter   Trigger: Check 2 hours   Preconditions: -   Postconditions: Latest civil defence shelter locations have been posted on Facebook and Twitter   Normal Flow: 1. API Service System checks whether 2 hours have elapsed since last update\n2. API Service System fetches latest civil defence shelter locations\n3. API Service System posts latest civil defence shelter locations to Facebook and Twitter through Notification System   Alternative Flows: -   Exceptions: 1a. 2 hours have not elapsed\n1. Wait 20 minutes and check again   Includes: -   Priority: Medium   Frequency of Use: High (every 2 hours)   Business Rules: -   Special Requirements: -   Assumptions: -   Notes and Issues: -    "
},
{
	"uri": "/lab-2/",
	"title": "Lab 2",
	"tags": [],
	"description": "",
	"content": " Architecture Design\nMain System  Design Reason We designed the system using a Client-Server architecture.\nThere are many advantages of using this architecture style:\n Modifiability by decoupling the computation  Each subsystem comply with predefined interfaces, which make each subsystem interchangeable.\n Concurrent execution and Scalability  Each subsystem is relatively independent, which makes duplication of save module possible. By introducing duplications, the system could be highly available, and efficient.\n Easy Integration  Easy to put all parts together.\nSubsystems  Web client subsystem API Subsystem Notification Subsystem  "
},
{
	"uri": "/lab-3/",
	"title": "Lab 3",
	"tags": [],
	"description": "",
	"content": "Component Design \u0026amp; Implementation\n"
},
{
	"uri": "/how-to-use/",
	"title": "How To Use",
	"tags": [],
	"description": "",
	"content": " Home Page In the home page, users will be able to view information about various reported crises. From the crisis table, users will be able to choose to either dispatch or resolve their selected crisis.\nReport Page In the report page, users will be able to report a crisis. Users will need to enter their information such as their name and mobile number, and also information about the reported crisis such as its location and type. After entering the required information, users can submit the report by clicking on the submit button at the bottom of the page.\n"
},
{
	"uri": "/lab-1/functional-requirements/",
	"title": "Functional Requirements",
	"tags": [],
	"description": "",
	"content": " Web Client System 1. Web Client System must be able to display real-time status update on a map of Singapore. 1.1. Web Client System must be able to fetch weather conditions. 1.2. Web Client System must be able to fetch dengue hotspot information. 1.3. Web Client System must be able to fetch haze information. 1.4. Web Client System must be able to display fetched information on a map of Singapore. 2. Web Client System must display phone number for crisis report. 3. Web Users must be able to report crisis using Crisis Report Form. 3.1. Web Users must be able to see the Incident Report Form in the Crisis Report Page. 3.2. Web Users must be able to fill in the Crisis Report Form. 3.2.1. Web Users must provide their name. 3.2.2. Web Users must provide their contact number. 3.2.3. Web Users must provide the location of the crisis. 3.2.4. Web Users must be able to see nearby crisis reported on the same day upon entering location. 3.2.5. Web Users must provide crisis type. 3.2.6. Web Users may provide crisis description. 3.2.7. Web Users may provide one or many types of assistance required, i.e. emergency ambulance, rescue and evacuation, fire-fighting and gas leak control. 3.3. Web Users must be able to submit Crisis Report Form. 3.3.1. Web Users must be able to see a success message when submit succeeds. 3.3.2. Web Users must be able to see a failure message when submit fails. 4. Call Center Operators must be able to login. 4.1. Call Center Operators must provide their username. 4.2. Call Center Operators must provide their password. 5. Call Center Operators must be able to input information received from calls. 5.1. Call Center Operators must be able to login using username and password. 5.2. Call Center Operators must be able to fill in the Crisis Report Form. 5.2.1. Call Center Operators must provide the name. 5.2.2. Call Center Operators must provide the contact number. 5.2.3. Call Center Operators must provide the location of the crisis. 5.2.4. Call Center Operators must be able to see nearby crisis reported on the same day upon entering location. 5.2.5. Call Center Operators must provide crisis type. 5.2.6. Call Center Operators may provide crisis description. 5.2.7. Call Center Operators may provide one or many types of assistance required, i.e. emergency ambulance, rescue and evacuation, fire-fighting and gas leak control. 5.3. Call Center Operators must be able to submit Crisis Report Form. 5.3.1. Call Center Operators must be able to see a success message when submit succeeds. 5.3.2. Call Center Operators must be able to see a failure message when submit fails. 6. Call Center Operators must be able to see a list of reported crisis. 6.1. Call Center Operators must be able to see the type, location, status (active, dispatched, resolved) of each crisis listing. 7. Call Center Operators must be able to edit crisis listing information. 8. Call Center Operators must be able to dispatch crisis interventions for a crisis listing. 9. Admin User must be able to login. 9.1. Admin User must provide their username. 9.2. Admin User must provide their password. 10. Admin User must be able to change system settings. 10.1. Admin User must be able to update predefined crisis type. 10.2. Admin User must be able to update predefined assistance type. 10.3. Admin User must be able to update predefined social media account. 10.4. Admin User must be able to update phone number of emergency agencies. 10.5. Admin User must be able to update summary reporting Email. 11. Admin User must be able to manage user accounts. 11.1. Admin User must be able to create new user account. 11.1.1. Admin User must provide username. 11.1.2. Admin User must provide password. 11.1.3. Admin User must provide role (Call Center Operator or Admin User). 11.2. Admin User must be able to edit user account. 11.2.1. Admin User may edit username. 11.2.2. Admin User may edit password. 11.2.3. Admin User may edit role (Call Center Operator or Admin User). 11.3. Admin User must be able to delete user account.  API Service System 12. API Service System must be able to provide a real-time status update of Singapore. 12.1. API Service must be able to provide the weather conditions. 12.2. API Service must be able to provide dengue hotspots as coordinates. 12.3. API Service must be able to provide haze information as numeric values. 13. API Service System must be able to process crisis report. 13.1. API Service System must be able to store crisis report into database. 14. API Service System must be able to return a list of reported crisis. 15. API Service System must be able to handle request of updating crisis listing information. 16. API Service System must be able to handle request of authenticating user with username and password. 17. API Service System must be able to handle request of dispatching crisis interventions. 18. API Service System must be able to handle request of updating system settings. 19. API Service System must be able to handle request of creating new user account. 20. API Service System must be able to handle request of updating user account. 21. API Service System must be able to handle request of deleting user account. 21.1. API Service System must be able to send crisis interventions request to Notification System. 22. API Service System must be able to generate crisis status summary report every 30 minutes. 22.1. API Service System must be able to send crisis status summary report to Notification System. 23. API Service System must be able to provide civil defence shelter locations. 23.1. API Service System must be able to fetch civil defence shelter locations. 23.2. API Service System must be able to send civil defence shelter locations to Notification System.  Notification System 24. The Notification System must be able to send a crisis status summary report to Prime Ministerâ€™s Office through Email. 24.1 The summary report must be sent within 5 seconds. 25. The Notification System must be able to post civil defence shelter locations to Facebook and Twitter. 25.1 The locations must be posted within 15 seconds. 26. The Notification System must be able to send SMS to emergency agencies. 26.1 The SMS must be sent within 5 seconds.  "
},
{
	"uri": "/lab-1/non-functional-requirements/",
	"title": "Non-functional Requirements",
	"tags": [],
	"description": "",
	"content": " Flexibility  Easy to add, edit and delete crisis type. Easy to add, edit and delete assistance type. Easy to update credentials, such as social media account, summary reporting Email, phone numbers of emergency agencies.  "
},
{
	"uri": "/lab-3/api-specification/",
	"title": "API Specification",
	"tags": [],
	"description": "",
	"content": " Fetch real-time crisis list GET /api/crisis/get_real_time_crisis_list  Responses\n   name type     status_code integer   error_message ?string   data array    data: [ { id: 1, location: { lat: 59.95, lng: 30.33 }, crisis_type: [\u0026quot;Fire\u0026quot;, \u0026quot;Injury\u0026quot;] crisis_description: \u0026quot;Fire in the whole!\u0026quot; }, { id: 2, location: { lat: 59.35, lng: 30.53 }, crisis_type: [\u0026quot;Gas Leak Control\u0026quot;, \u0026quot;Rescue and Evacuation\u0026quot;] crisis_description: \u0026quot;Help!\u0026quot; } ... ]  Staff login POST /api/auth/login  Parameters\n   name type     username string   password string    Responses\n   name type     status_code integer   error_message ?string    "
},
{
	"uri": "/lab-2/api-subsystem/",
	"title": "API Subsystem",
	"tags": [],
	"description": "",
	"content": " MVC architecture  "
},
{
	"uri": "/lab-2/notification-subsystem/",
	"title": "Notification Subsystem",
	"tags": [],
	"description": "",
	"content": " Call-and-return architecture  "
},
{
	"uri": "/lab-2/web-client/",
	"title": "Web-client Subsystem",
	"tags": [],
	"description": "",
	"content": " Event based implicit invocation system architecture  "
},
{
	"uri": "/lab-2/design-thoughts/",
	"title": "Design Rationale",
	"tags": [],
	"description": "",
	"content": " By designing a combination of Client-Server Architecture and MVC pattern.\nThe whole system contains three main components with Client-Server architecture. MVC pattern are used in API Service Subsystem Logic.\nRationale and advantages are as followed: First of all, by selecting Client-Server Architecture overhead:\nAdvantages: 1. Centralization of control:\nAccess, resources and integrity of the data are controlled by the dedicated server so that a program or unauthorized client cannot damage the system. This centralization also facilitates task of updating data or other resources (better than the networks P2P).\n2. Scalability:\nYou can increase the capacity of clients and servers separately. Any element can be increased (or enhanced) at any time, or you can add new nodes to the network (clients or servers).\n3. Easy maintenance:\ndistribute the roles and responsibilities to several standalone computers, you can replace, repair, upgrade, or even move a server, while customers will not be affected by that change (or minimally affect). This independence of the changes is also known as encapsulation.\nThere are technologies sufficiently developed, designed for the paradigm of C / S to ensure security in transactions, interface friendliness, and ease of use.\nThus, over all, by using Independent Components, we will be able to:\n1. Modifiability by decoupling the computation\nEach subsystem comply with predefined interfaces, which make each subsystem interchangeable.\n2. Concurrent execution and Scalability\nEach subsystem is relatively independent, which makes duplication of save module possible. By introducing duplications, the system could be highly available, and efficient.\nTo explore more detailed design, by selecting MVC for API Service System:\nIt divides a given software application into three interconnected parts, so as to separate internal representations of information from the ways that information is presented to or accepted from the user. With advantages:\n Faster development process: MVC supports rapid and parallel development. With MVC, one programmer can work on the view while other can work on the controller to create business logic of the web application. The application developed using MVC can be faster than application developed using other development patterns.\n Ability to provide multiple views: In the MVC Model, you can create multiple views for a model. Code duplication is very limited in MVC because it separates data and business logic from the display.\n Support for asynchronous technique: MVC also supports asynchronous technique, which helps developers to develop an application that loads very fast.\n Modification does not affect the entire model: Modification does not affect the entire model because model part does not depend on the views part. Therefore, any changes in the Model will not affect the entire architecture.\n MVC model returns the data without formatting: MVC pattern returns data without applying any formatting so the same components can be used and called for use with any interface.\n  "
},
{
	"uri": "/lab-1/analysis-models/",
	"title": "Analysis Models",
	"tags": [],
	"description": "",
	"content": " Data Flow Diagram  Entity-Relationship Diagram (ER Diagram)  Dialog Map  Decision Tables Requirement: How System Decide whether a Crisis Can be Dispatched or not?    Requirement Number   Condition 1 2 3 4 5 6   isOperator F T T T T T   isAdmin - F F F T T   isDispatched - T T F T T   isResolved - F T F F T   Action   Accept Dispatch    X     Reject Dispatch X X X  X X   "
},
{
	"uri": "/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Â© 2018 Dean\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "Contributors",
	"content": "TODO\n"
},
{
	"uri": "/",
	"title": "Documentation | Dean&#39;s Crisis Management System",
	"tags": [],
	"description": "",
	"content": " Dean\u0026rsquo;s Crisis Management System Project for CZ3003.\nProud to present by Dean\u0026rsquo;s Team.\nView on GitHub\n"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]